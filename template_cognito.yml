AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation parent template for setting up Cognito for Feide login
#
#  After Cognito has been created it must be registered with Feide
#  The user pools service provider URN is: urn:amazon:cognito:sp:<user_pool_id>
#
#  Information needed is:
#
#    Amazon Cognito Domain:  https://nva-test.auth.eu-west-1.amazoncognito.com
#    Amazon Cognito URN:     urn:amazon:cognito:sp:eu-west-1_JRPabH2jf
#
Parameters:

  AuthenticationDomain:
    Type: String
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Default: 'nva-test'
    Description: The domain name for the domain that hosts the sign-up and sign-in pages for your application.

  FeideMetadataURL:
    Type: String
    Default:  https://idp-test.feide.no/simplesaml/saml2/idp/metadata.php
    Description: Link to the the identity provider details.

  FrontendApplicationUrl:
    Type: String
    Default: 'https://frontend.test.nva.aws.unit.no'
    Description: A base URL for the callbacks for the identity providers.

Resources:

  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: AddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  PostAuthenticationTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt TriggerExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          import boto3

          client = boto3.client('cognito-idp')


          def add_user_attributes(event):
              affiliation = event.get("request", {}).get("userAttributes", {}).get('custom:affiliation')

              if 'staff' in affiliation:
                  client.admin_add_user_to_group(
                      UserPoolId=event['userPoolId'],
                      Username=event['userName'],
                      GroupName='PublisherGroup'
                  )

                  client.admin_update_user_attributes(
                      UserPoolId=event['userPoolId'],
                      Username=event['userName'],
                      UserAttributes=[
                          {
                              'Name': 'custom:applicationRoles',
                              'Value': 'Publisher'
                          }
                      ]
                  )

              client.admin_update_user_attributes(
                  UserPoolId=event['userPoolId'],
                  Username=event['userName'],
                  UserAttributes=[
                      {'Name': 'custom:application', 'Value': 'NVA'},
                      {'Name': 'custom:identifiers',
                       'Value': 'feide:' + event.get("request", {}).get("userAttributes", {}).get('custom:feideId')}
                  ]
              )


          def handler(event, context):
              affiliation = event.get("request", {}).get("userAttributes", {}).get('custom:affiliation')

              if affiliation is None:
                  print(json.dumps(event, default=str))
                  raise Exception('Missing affiliation attribute')

              add_user_attributes(event)
              return event

  InvokePostAuthenticationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthenticationTrigger.Arn
      Principal: cognito-idp.amazonaws.com

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: NVA-UserPool-test
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes: [email]
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      MfaConfiguration: 'OFF'
      LambdaConfig:
        PostAuthentication: !GetAtt PostAuthenticationTrigger.Arn
      Schema:
        - Name: affiliation
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: application
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: applicationRoles
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: commonName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideTargetedId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: forwardedFor
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: identifiers
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgEmail
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgLegalName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgNumber
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: schoolList
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: yearOfBirth
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AuthenticationDomain

  UserPoolIdentityProviderFeide:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        custom:affiliation: eduPersonAffiliation
        custom:commonName: cn
        custom:feideId: eduPersonPrincipalName
        custom:feideTargetedId: eduPersonTargetedID
        custom:orgLegalName: eduPersonOrgDN:eduOrgLegalName
        name: displayName
        custom:orgEmail: eduPersonOrgDN:mail
        custom:orgName: eduPersonOrgDN:o
        custom:orgNumber: eduPersonOrgDN:norEduOrgNIN
        custom:schoolList: feideSchoolList
        custom:yearOfBirth: feideYearOfBirth
        given_name: givenName
        email: mail
        family_name: sn
      UserPoolId: !Ref UserPool
      ProviderName: FeideIdentityProvider
      ProviderType: SAML
      ProviderDetails:
        MetadataURL: !Ref FeideMetadataURL

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProviderFeide
      UserPoolId: !Ref UserPool
      CallbackURLs:
        -
          !Ref FrontendApplicationUrl
      LogoutURLs:
        -
          !Sub '${FrontendApplicationUrl}/logout'
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - aws.cognito.signin.user.admin

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        -
          ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region", client: !Ref UserPool}

  # IAM role used for authenticated users
  FeideAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: ['*']

  # IAM role used for unauthenticated users
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthenticatedRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt FeideAuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # IAM role used for users allowed to publish
  PublisherRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: PublisherPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  FeideAuthenticatedGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: FeideAuthenticatedGroup
      Description: Common users authenticated with Feide
      RoleArn: !GetAtt FeideAuthenticatedRole.Arn
      UserPoolId: !Ref UserPool

  PublisherGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: PublisherGroup
      Description: Users allowed to publish
      RoleArn: !GetAtt PublisherRole.Arn
      UserPoolId: !Ref UserPool


Outputs:
  CognitoAuthorizerArn:
    Description: ARN Identifier of the UserPool
    Value: !GetAtt UserPool.Arn
    Export:
      Name: CognitoAuthorizerArn
  CognitoIdentityPoolId:
    Description: Identifier of the IdentityPool assosiated with the UserPool
    Value: !Ref IdentityPool
    Export:
      Name: CognitoIdentityPoolId
  CognitoUserPoolId:
    Description: Identifier of the UserPool in Cognito
    Value: !Ref UserPool
    Export:
      Name: CognitoUserPoolId
  CognitoUserPoolAppClientId:
    Description: Identifier to use for the app clients to access this user pool
    Value: !Ref UserPoolClient
    Export:
      Name: CognitoUserPoolAppClientId
  CognitoLoginUrl:
    Description: URL to the cognito login, domain for cognito
    Value: !Sub
      - 'https://${domain}.auth.${AWS::Region}.amazoncognito.com'
      - { domain: !Ref AuthenticationDomain }
    Export:
      Name: CognitoLoginUrl
  CognitoURN:
    Description: URN of the cognito login to use in Feide
    Value: !Sub
      - 'urn:amazon:cognito:sp:${poolId}'
      - { poolId: !Ref UserPool }
    Export:
      Name: CognitoURN
