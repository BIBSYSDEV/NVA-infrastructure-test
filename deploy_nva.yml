AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: v1.0 Complete deployment of NVA

Parameters:

  DomainCertificateArn:
    Type: String
    Description: ARN  of certificate to assign to the assosiated Domain
#    Default: arn:aws:acm:us-east-1:812481234721:certificate/9319e9f9-3a66-43bb-9f9c-7fc1e6b4d3ab   # Test
    Default: arn:aws:acm:us-east-1:750639270376:certificate/72355178-f20b-45c9-b036-5a9196f9da9d   # Dev/sandbox

  DomainBasePart:
    Type: String
    Description: |
      Base part of the domain the stack and components will be deployed to. Must be covered by the certificate.
      Could be somethoing like .test.aws.unit.no or np-733.test.aws.no.
      Used to calculate the other addresses in the deployment

  FeideMetadataURL:
    Type: String
    Default:  https://idp-test.feide.no/simplesaml/saml2/idp/metadata.php
    Description: Link to the the identity provider details.


  BareApiKey:
    Type: String
    Description: Key to access bare
    NoEcho: true
    Default: '{{resolve:secretsmanager:bareApiKey:SecretString}}'
  BareHost:
    Type: String
    Description: Address to bare
    Default: alfa-a.bibsys.no
  AlmaSruHost:
    Type: String
    Description: Address to Alma-SRU
    Default: bibsys.alma.exlibrisgroup.com/view/sru/47BIBSYS_NETWORK
  OrcidBaseUrl:
    Type: String
    Description: Address to ORCID services
    Default: https://sandbox.orcid.org
  OrcidClientID:
    Type: String
    Description: Clientid for ORCID
    Default: APP-QHBJSU99SZV1LMQJ
  OrcidClientSecret:
    Type: String
    Description: Secret to authenticate for ORCID
    NoEcho: true
    Default: '{{resolve:secretsmanager:REACT_APP_ORCID_CLIENT_SECRET:SecretString}}'
  AlmaApiUrl:
    Type: String
    Description: URL to ALMA Library services
    Default: https://bibsys.alma.exlibrisgroup.com/view/sru/47BIBSYS_NETWORK



Resources:

  # ===============================
  #  Domene
  # ===============================

  FrontendDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub 'frontend${DomainBasePart}'

  AuthenticationDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub 'auth${DomainBasePart}'

  BackendApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub 'api${DomainBasePart}'

  # ===============================
  #  Cognito
  # ===============================


  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: AddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'

  PostAuthenticationTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt TriggerExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          import boto3

          client = boto3.client('cognito-idp')


          def add_user_attributes(event):
              affiliation = event.get("request", {}).get("userAttributes", {}).get('custom:affiliation')

              if 'staff' in affiliation:
                  client.admin_add_user_to_group(
                      UserPoolId=event['userPoolId'],
                      Username=event['userName'],
                      GroupName='PublisherGroup'
                  )

                  client.admin_update_user_attributes(
                      UserPoolId=event['userPoolId'],
                      Username=event['userName'],
                      UserAttributes=[
                          {
                              'Name': 'custom:applicationRoles',
                              'Value': 'Publisher'
                          }
                      ]
                  )

              client.admin_update_user_attributes(
                  UserPoolId=event['userPoolId'],
                  Username=event['userName'],
                  UserAttributes=[
                      {'Name': 'custom:application', 'Value': 'NVA'},
                      {'Name': 'custom:identifiers',
                       'Value': 'feide:' + event.get("request", {}).get("userAttributes", {}).get('custom:feideId')}
                  ]
              )


          def handler(event, context):
              affiliation = event.get("request", {}).get("userAttributes", {}).get('custom:affiliation')

              if affiliation is None:
                  print(json.dumps(event, default=str))
                  raise Exception('Missing affiliation attribute')

              add_user_attributes(event)
              return event

  InvokePostAuthenticationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthenticationTrigger.Arn
      Principal: cognito-idp.amazonaws.com

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      #      UserPoolName: NVA-UserPool-test    #Not reqiured
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes: [email]
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      MfaConfiguration: 'OFF'
      LambdaConfig:
        PostAuthentication: !GetAtt PostAuthenticationTrigger.Arn
      Schema:
        - Name: affiliation
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: application
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: applicationRoles
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: commonName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideTargetedId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: forwardedFor
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: identifiers
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgEmail
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgLegalName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgNumber
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: schoolList
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: yearOfBirth
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AuthenticationDomain

  UserPoolIdentityProviderFeide:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        custom:affiliation: eduPersonAffiliation
        custom:commonName: cn
        custom:feideId: eduPersonPrincipalName
        custom:feideTargetedId: eduPersonTargetedID
        custom:orgLegalName: eduPersonOrgDN:eduOrgLegalName
        name: displayName
        custom:orgEmail: eduPersonOrgDN:mail
        custom:orgName: eduPersonOrgDN:o
        custom:orgNumber: eduPersonOrgDN:norEduOrgNIN
        custom:schoolList: feideSchoolList
        custom:yearOfBirth: feideYearOfBirth
        given_name: givenName
        email: mail
        family_name: sn
      UserPoolId: !Ref UserPool
      ProviderName: !Sub '${AWS::StackName}-FeideIdP'
      ProviderType: SAML
      ProviderDetails:
        MetadataURL: !Ref FeideMetadataURL

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProviderFeide
      UserPoolId: !Ref UserPool
      CallbackURLs:
        -
          !Ref FrontendDomain
      LogoutURLs:
        - !Sub
          - ${FrontendDomainBasePath}/logout
          - FrontendDomainBasePath: !Ref FrontendDomain
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - aws.cognito.signin.user.admin

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        -
          ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region", client: !Ref UserPool}

  # IAM role used for authenticated users
  FeideAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: ['*']

  # IAM role used for unauthenticated users
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthenticatedRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt FeideAuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # IAM role used for users allowed to publish
  PublisherRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: PublisherPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  FeideAuthenticatedGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      #      GroupName: FeideAuthenticatedGroup   #Not reqiured
      Description: Common users authenticated with Feide
      RoleArn: !GetAtt FeideAuthenticatedRole.Arn
      UserPoolId: !Ref UserPool

  PublisherGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      #      GroupName: PublisherGroup #Not reqiured
      Description: Users allowed to publish
      RoleArn: !GetAtt PublisherRole.Arn
      UserPoolId: !Ref UserPool


  # ===============================
  #  DynamoDB
  # ===============================

  # ===============================
  #  S3 Storage
  # ===============================


  NVAStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
#      BucketName: nva-storage-sandbox  # Not required
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            ExposedHeaders: [ETag]
      LifecycleConfiguration:
        Rules:
          - Id: RemoveFailedUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      VersioningConfiguration:
        Status: Enabled


  NVAStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NVAStorageBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUploadParts"
              - "s3:ListBucketMultipartUploads"
            Effect: "Allow"
            Resource:
              - arn:aws:s3:::nva-storage-test
              - arn:aws:s3:::nva-storage-test/*
            Principal:
              Service:
                - lambda.amazonaws.com

  # ===============================
  #  Frontend
  # ===============================

  NVAFrontend:
    Type: AWS::Serverless::Application
    Description: NVA Frontend
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:884807050265:applications/NVA-Frontend
        SemanticVersion: 1.1.2
      Parameters:
        AlmaApiUrl: !Ref AlmaApiUrl
        AmazonCognitoDomain: !Ref AuthenticationDomain
        FrontendDomain: !Ref FrontendDomain
        BackendDomain: !Ref BackendApiDomain
        DomainCertificateArn: !Ref DomainCertificateArn
        CognitoIdentityPoolId: !Ref IdentityPool
        UserPoolId: !Ref UserPool
        UserPoolAppClientId: !Ref UserPoolClient
        RedirectSignInUrl: !Ref FrontendDomain
        RedirectSignOutUrl: !Sub
          - ${FrontendDomainBasePath}/logout
          - FrontendDomainBasePath: !Ref FrontendDomain
        OrcidBaseUrl: !Ref OrcidBaseUrl
        OrcidClientID: !Ref OrcidClientID
        OrcidClientSecret: !Ref OrcidClientSecret
        OrcidRedirectUri: !Sub
          - ${FrontendDomainBasePath}/user
          - FrontendDomainBasePath: !Ref FrontendDomain

  # ===============================
  #  API / Backend
  # ===============================
  BackendLambdas:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://nva-infrastructure-sandbox.s3-eu-west-1.amazonaws.com/deploy_backend.yml"
      Parameters:
        CognitoAuthorizerArn: !Ref UserPool
        BackendDomain: !Ref BackendApiDomain
        BareApiKey: !Ref BareApiKey
        BareHost: !Ref BareHost
        AlmaSruHost: !Ref AlmaSruHost

